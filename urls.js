const express = require('express');const router = express.Router();const { v4: uuidv4 } = require('uuid');const { body, validationResult } = require('express-validator');const Url = require('../models/url');const { logger } = require('../middleware/logger');const generateShortCode = () => {  return Math.random().toString(36).substring(2, 8);};router.post('/', [  body('url').isURL().withMessage('Please provide a valid URL'),  body('validity').optional().isInt({ min: 1, max: 43200 }).withMessage('Validity must be between 1 and 43200 minutes (30 days)'),  body('shortcode').optional().isAlphanumeric().isLength({ min: 4, max: 20 }).withMessage('Shortcode must be 4-20 alphanumeric characters')], async (req, res) => {  try {    const errors = validationResult(req);    if (!errors.isEmpty()) {      logger.warn(`Validation failed: ${JSON.stringify(errors.array())}`);      return res.status(400).json({ errors: errors.array() });    }    const { url, validity = 30, shortcode } = req.body;        let finalShortCode = shortcode;    if (shortcode) {      const isAvailable = await Url.isShortCodeAvailable(shortcode);      if (!isAvailable) {        logger.warn(`Shortcode ${shortcode} is already in use`);        return res.status(409).json({ error: 'Shortcode is already in use' });      }    } else {      let isUnique = false;      while (!isUnique) {        finalShortCode = generateShortCode();        isUnique = await Url.isShortCodeAvailable(finalShortCode);      }    }    const expiresAt = new Date();    expiresAt.setMinutes(expiresAt.getMinutes() + Number(validity));    const newUrl = new Url({      originalUrl: url,      shortCode: finalShortCode,      expiresAt    });    await newUrl.save();        logger.info(`Created short URL: ${finalShortCode} for ${url}`);        res.status(201).json({      shortlink: `${req.protocol}://${req.get('host')}/${finalShortCode}`,      expiry: expiresAt.toISOString()    });  } catch (error) {    logger.error(`Error creating short URL: ${error.message}`);    res.status(500).json({ error: 'Internal server error' });  }});router.get('/:shortCode', async (req, res) => {  try {    const { shortCode } = req.params;        const url = await Url.findOne({ shortCode });        if (!url) {      logger.warn(`Short code not found: ${shortCode}`);      return res.status(404).json({ error: 'URL not found' });    }        await url.incrementClicks();        logger.info(`Redirecting ${shortCode} to ${url.originalUrl}`);        res.redirect(302, url.originalUrl);  } catch (error) {    logger.error(`Error redirecting: ${error.message}`);    res.status(500).json({ error: 'Internal server error' });  }});router.get('/:shortCode/stats', async (req, res) => {  try {    const { shortCode } = req.params;        const url = await Url.findOne({ shortCode });        if (!url) {      logger.warn(`Statistics requested for non-existent short code: ${shortCode}`);      return res.status(404).json({ error: 'URL not found' });    }        logger.info(`Retrieved statistics for short code: ${shortCode}`);        res.json({      originalUrl: url.originalUrl,      shortCode: url.shortCode,      createdAt: url.createdAt,      expiresAt: url.expiresAt,      clicks: url.clicks,      lastAccessed: url.lastAccessed    });  } catch (error) {    logger.error(`Error retrieving statistics: ${error.message}`);    res.status(500).json({ error: 'Internal server error' });  }});module.exports = router;