const winston = require('winston');const { createLogger, format, transports } = winston;const { combine, timestamp, printf } = format;const DailyRotateFile = require('winston-daily-rotate-file');const path = require('path');const logFormat = printf(({ level, message, timestamp }) => {  return `${timestamp} [${level.toUpperCase()}]: ${message}`;});const logDir = path.join(__dirname, '../../logs');require('fs').existsSync(logDir) || require('fs').mkdirSync(logDir);const logger = createLogger({  level: 'info',  format: combine(    timestamp({      format: 'YYYY-MM-DD HH:mm:ss'    }),    logFormat  ),  transports: [    new DailyRotateFile({      filename: path.join(logDir, 'combined-%DATE%.log'),      datePattern: 'YYYY-MM-DD',      maxSize: '20m',      maxFiles: '14d'    }),    new DailyRotateFile({      filename: path.join(logDir, 'error-%DATE%.log'),      datePattern: 'YYYY-MM-DD',      level: 'error',      maxSize: '20m',      maxFiles: '14d'    })  ]});if (process.env.NODE_ENV !== 'production') {  logger.add(new transports.Console({    format: format.combine(      format.colorize(),      format.simple()    )  }));}  const requestLogger = (req, res, next) => {  const start = Date.now();    res.on('finish', () => {    const duration = Date.now() - start;    logger.info(`${req.method} ${req.originalUrl} - ${res.statusCode} - ${duration}ms`);  });    next();};const errorLogger = (err, req, res, next) => {  logger.error(`${err.status || 500} - ${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`);  logger.error(err.stack);    res.status(500).json({    error: {      message: process.env.NODE_ENV === 'development' ? err.message : 'Internal Server Error',      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })    }  });};module.exports = {  logger,  requestLogger,  errorLogger};